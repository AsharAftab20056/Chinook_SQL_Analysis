<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Chinook_Sqlites.sqlite" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="4041"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Album" custom_title="0" dock_id="1" table="4,5:mainAlbum"/><dock_state state="000000ff00000000fd0000000100000002000005f4000002b6fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000005f40000012400ffffff000005f40000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="56"/><column index="2" value="300"/><column index="3" value="53"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Artist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="51"/><column index="2" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Employee" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="74"/><column index="2" value="70"/><column index="3" value="70"/><column index="4" value="156"/><column index="5" value="67"/><column index="6" value="156"/><column index="7" value="156"/><column index="8" value="218"/><column index="9" value="85"/><column index="10" value="38"/><column index="11" value="54"/><column index="12" value="70"/><column index="13" value="140"/><column index="14" value="140"/><column index="15" value="195"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Invoice" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="62"/><column index="2" value="76"/><column index="3" value="156"/><column index="4" value="300"/><column index="5" value="156"/><column index="6" value="72"/><column index="7" value="117"/><column index="8" value="105"/><column index="9" value="46"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- Query 1: Top 10 Best-Selling Tracks by Quantity
SELECT 
    t.Name as TrackName,
    SUM(il.Quantity) as TotalQuantitySold,
    COUNT(il.InvoiceLineId) as NumberOfSales,
    SUM(il.UnitPrice * il.Quantity) as TotalRevenue
FROM Track t
JOIN InvoiceLine il ON t.TrackId = il.TrackId
GROUP BY t.TrackId, t.Name
ORDER BY TotalQuantitySold DESC, TotalRevenue DESC
LIMIT 10;

-- Query 2: Top 10 Revenue-Generating Tracks
SELECT 
    t.Name as TrackName,
    a.Title as AlbumName,
    ar.Name as ArtistName,
    SUM(il.Quantity) as TotalQuantitySold,
    SUM(il.UnitPrice * il.Quantity) as TotalRevenue,
    ROUND(AVG(il.UnitPrice), 2) as AveragePrice
FROM Track t
JOIN InvoiceLine il ON t.TrackId = il.TrackId
JOIN Album a ON t.AlbumId = a.AlbumId
JOIN Artist ar ON a.ArtistId = ar.ArtistId
GROUP BY t.TrackId, t.Name, a.Title, ar.Name
ORDER BY TotalRevenue DESC, TotalQuantitySold DESC
LIMIT 10;

-- Query 3: Top-Selling Products by Genre
SELECT 
    g.Name as Genre,
    COUNT(DISTINCT t.TrackId) as NumberOfTracks,
    SUM(il.Quantity) as TotalQuantitySold,
    SUM(il.UnitPrice * il.Quantity) as TotalRevenue,
    ROUND(AVG(il.UnitPrice * il.Quantity), 2) as AverageRevenuePerSale
FROM Genre g
JOIN Track t ON g.GenreId = t.GenreId
JOIN InvoiceLine il ON t.TrackId = il.TrackId
GROUP BY g.GenreId, g.Name
ORDER BY TotalRevenue DESC;

-- Query 4: Revenue by Country
SELECT 
    c.Country,
    COUNT(DISTINCT c.CustomerId) as NumberOfCustomers,
    COUNT(i.InvoiceId) as NumberOfOrders,
    SUM(i.Total) as TotalRevenue,
    ROUND(AVG(i.Total), 2) as AverageOrderValue,
    ROUND(SUM(i.Total) / COUNT(DISTINCT c.CustomerId), 2) as RevenuePerCustomer
FROM Customer c
JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY c.Country
ORDER BY TotalRevenue DESC;

-- Query 5: Revenue by State/Province (for countries with states)
SELECT 
    c.Country,
    c.State,
    COUNT(DISTINCT c.CustomerId) as NumberOfCustomers,
    COUNT(i.InvoiceId) as NumberOfOrders,
    SUM(i.Total) as TotalRevenue,
    ROUND(AVG(i.Total), 2) as AverageOrderValue
FROM Customer c
JOIN Invoice i ON c.CustomerId = i.CustomerId
WHERE c.State IS NOT NULL AND c.State != ''
GROUP BY c.Country, c.State
ORDER BY TotalRevenue DESC;

-- Query 6: Top Cities by Revenue
SELECT 
    c.City,
    c.Country,
    COUNT(DISTINCT c.CustomerId) as NumberOfCustomers,
    SUM(i.Total) as TotalRevenue,
    ROUND(AVG(i.Total), 2) as AverageOrderValue
FROM Customer c
JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY c.City, c.Country
ORDER BY TotalRevenue DESC
LIMIT 15;

-- Query 7: Monthly Performance by Track
SELECT 
    strftime('%Y-%m', i.InvoiceDate) AS Month, -- Year-Month format
    t.Name AS TrackName,
    a.Title AS AlbumName,
    ar.Name AS ArtistName,
    SUM(il.Quantity) AS TotalQuantitySold,
    SUM(il.UnitPrice * il.Quantity) AS TotalRevenue,
    ROUND(AVG(il.UnitPrice), 2) AS AveragePrice
FROM InvoiceLine il
JOIN Invoice i ON il.InvoiceId = i.InvoiceId
JOIN Track t ON il.TrackId = t.TrackId
JOIN Album a ON t.AlbumId = a.AlbumId
JOIN Artist ar ON a.ArtistId = ar.ArtistId
GROUP BY Month, t.TrackId, t.Name, a.Title, ar.Name
ORDER BY Month ASC, TotalRevenue DESC;

--Query 8:  JOINs to combine product and sales table.
SELECT 
    t.TrackId,
    t.Name AS TrackName,
    t.UnitPrice AS TrackPrice,
    il.InvoiceLineId,
    il.Quantity,
    il.UnitPrice AS SalePrice,
    (il.Quantity * il.UnitPrice) AS TotalSale
FROM Track t
JOIN InvoiceLine il ON t.TrackId = il.TrackId;

-- Bonus Query: Rank Tracks by Monthly Revenue Using Window Function
WITH RankedTracks AS (
    SELECT
        strftime('%Y-%m', i.InvoiceDate) AS Month,
        t.Name AS TrackName,
        a.Title AS AlbumName,
        ar.Name AS ArtistName,
        ROUND(SUM(il.UnitPrice * il.Quantity), 2) AS TotalRevenue,
        ROW_NUMBER() OVER (
            PARTITION BY strftime('%Y-%m', i.InvoiceDate)
            ORDER BY SUM(il.UnitPrice * il.Quantity) DESC
        ) AS RevenueRank
    FROM InvoiceLine il
    JOIN Invoice i ON il.InvoiceId = i.InvoiceId
    JOIN Track t ON il.TrackId = t.TrackId
    JOIN Album a ON t.AlbumId = a.AlbumId
    JOIN Artist ar ON a.ArtistId = ar.ArtistId
    GROUP BY Month, t.TrackId, t.Name, a.Title, ar.Name
)
SELECT *
FROM RankedTracks
WHERE RevenueRank = 1
ORDER BY Month;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
